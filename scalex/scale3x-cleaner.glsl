// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = TexCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = TexCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec3 _TMP41;
vec3 _TMP42;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
bool _TMP88;
bvec3 _a0091;
bool _TMP92;
bvec3 _a0095;
bool _TMP96;
bvec3 _a0099;
bool _TMP100;
bvec3 _a0103;
bool _TMP104;
bvec3 _a0107;
bool _TMP108;
bvec3 _a0111;
bool _TMP112;
bvec3 _a0115;
bool _TMP116;
bvec3 _a0119;
bool _TMP120;
bvec3 _a0123;
bool _TMP124;
bvec3 _a0127;
bool _TMP128;
bvec3 _a0131;
bool _TMP132;
bvec3 _a0135;
bool _TMP136;
bvec3 _a0139;
bool _TMP140;
bvec3 _a0143;
bool _TMP144;
bvec3 _a0147;
bool _TMP148;
bvec3 _a0151;
bool _TMP152;
bvec3 _a0155;
bool _TMP156;
bvec3 _a0159;
bool _TMP160;
bvec3 _a0163;
bool _TMP164;
bvec3 _a0167;
bool _TMP168;
bvec3 _a0171;
bool _TMP172;
bvec3 _a0175;
bool _TMP176;
bvec3 _a0179;
bool _TMP180;
bvec3 _a0183;
bool _TMP184;
bvec3 _a0187;
bool _TMP188;
bvec3 _a0191;
bool _TMP192;
bvec3 _a0195;
bool _TMP196;
bvec3 _a0199;
bool _TMP200;
bvec3 _a0203;
bool _TMP204;
bvec3 _a0207;
bool _TMP208;
bvec3 _a0211;
bool _TMP212;
bvec3 _a0215;
bool _TMP216;
bvec3 _a0219;
bool _TMP220;
bvec3 _a0223;
bool _TMP224;
bvec3 _a0227;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bool _eqEB_HACJ;
    bool _eqEH_BGIM;
    bool _eqEA_HNP;
    bool _eqEC_HOQ;
    bool _eqEG_BRT;
    bool _eqEI_BSU;
    bool _outB;
    bool _outH;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _a0091 = bvec3(_TMP4.x == _TMP6.x, _TMP4.y == _TMP6.y, _TMP4.z == _TMP6.z);
    _TMP88 = _a0091.x && _a0091.y && _a0091.z;
    _a0095 = bvec3(_TMP4.x == _TMP8.x, _TMP4.y == _TMP8.y, _TMP4.z == _TMP8.z);
    _TMP92 = _a0095.x && _a0095.y && _a0095.z;
    _a0099 = bvec3(_TMP4.x == _TMP9.x, _TMP4.y == _TMP9.y, _TMP4.z == _TMP9.z);
    _TMP96 = _a0099.x && _a0099.y && _a0099.z;
    _a0103 = bvec3(_TMP4.x == _TMP10.x, _TMP4.y == _TMP10.y, _TMP4.z == _TMP10.z);
    _TMP100 = _a0103.x && _a0103.y && _a0103.z;
    _a0107 = bvec3(_TMP4.x == _TMP11.x, _TMP4.y == _TMP11.y, _TMP4.z == _TMP11.z);
    _TMP104 = _a0107.x && _a0107.y && _a0107.z;
    _a0111 = bvec3(_TMP4.x == _TMP13.x, _TMP4.y == _TMP13.y, _TMP4.z == _TMP13.z);
    _TMP108 = _a0111.x && _a0111.y && _a0111.z;
    _a0115 = bvec3(_TMP7.x == _TMP4.x, _TMP7.y == _TMP4.y, _TMP7.z == _TMP4.z);
    _TMP112 = _a0115.x && _a0115.y && _a0115.z;
    _a0119 = bvec3(_TMP7.x == _TMP6.x, _TMP7.y == _TMP6.y, _TMP7.z == _TMP6.z);
    _TMP116 = _a0119.x && _a0119.y && _a0119.z;
    _a0123 = bvec3(_TMP7.x == _TMP8.x, _TMP7.y == _TMP8.y, _TMP7.z == _TMP8.z);
    _TMP120 = _a0123.x && _a0123.y && _a0123.z;
    _a0127 = bvec3(_TMP7.x == _TMP10.x, _TMP7.y == _TMP10.y, _TMP7.z == _TMP10.z);
    _TMP124 = _a0127.x && _a0127.y && _a0127.z;
    _a0131 = bvec3(_TMP10.x == _TMP3.x, _TMP10.y == _TMP3.y, _TMP10.z == _TMP3.z);
    _TMP128 = _a0131.x && _a0131.y && _a0131.z;
    _a0135 = bvec3(_TMP10.x == _TMP5.x, _TMP10.y == _TMP5.y, _TMP10.z == _TMP5.z);
    _TMP132 = _a0135.x && _a0135.y && _a0135.z;
    _a0139 = bvec3(_TMP10.x == _TMP6.x, _TMP10.y == _TMP6.y, _TMP10.z == _TMP6.z);
    _TMP136 = _a0139.x && _a0139.y && _a0139.z;
    _a0143 = bvec3(_TMP10.x == _TMP8.x, _TMP10.y == _TMP8.y, _TMP10.z == _TMP8.z);
    _TMP140 = _a0143.x && _a0143.y && _a0143.z;
    _a0147 = bvec3(_TMP10.x == _TMP1.x, _TMP10.y == _TMP1.y, _TMP10.z == _TMP1.z);
    _TMP144 = _a0147.x && _a0147.y && _a0147.z;
    _eqEB_HACJ = _TMP112 && _TMP128 && _TMP132 && _TMP144;
    _eqEH_BGIM = _TMP124 && _TMP96 && _TMP104 && _TMP108;
    _a0151 = bvec3(_TMP7.x == _TMP3.x, _TMP7.y == _TMP3.y, _TMP7.z == _TMP3.z);
    _TMP148 = _a0151.x && _a0151.y && _a0151.z;
    _a0155 = bvec3(_TMP10.x == _TMP0.x, _TMP10.y == _TMP0.y, _TMP10.z == _TMP0.z);
    _TMP152 = _a0155.x && _a0155.y && _a0155.z;
    _a0159 = bvec3(_TMP10.x == _TMP15.x, _TMP10.y == _TMP15.y, _TMP10.z == _TMP15.z);
    _TMP156 = _a0159.x && _a0159.y && _a0159.z;
    _eqEA_HNP = _TMP148 && _TMP152 && _TMP156;
    _a0163 = bvec3(_TMP7.x == _TMP5.x, _TMP7.y == _TMP5.y, _TMP7.z == _TMP5.z);
    _TMP160 = _a0163.x && _a0163.y && _a0163.z;
    _a0167 = bvec3(_TMP10.x == _TMP2.x, _TMP10.y == _TMP2.y, _TMP10.z == _TMP2.z);
    _TMP164 = _a0167.x && _a0167.y && _a0167.z;
    _a0171 = bvec3(_TMP10.x == _TMP18.x, _TMP10.y == _TMP18.y, _TMP10.z == _TMP18.z);
    _TMP168 = _a0171.x && _a0171.y && _a0171.z;
    _eqEC_HOQ = _TMP160 && _TMP164 && _TMP168;
    _a0175 = bvec3(_TMP7.x == _TMP9.x, _TMP7.y == _TMP9.y, _TMP7.z == _TMP9.z);
    _TMP172 = _a0175.x && _a0175.y && _a0175.z;
    _a0179 = bvec3(_TMP4.x == _TMP17.x, _TMP4.y == _TMP17.y, _TMP4.z == _TMP17.z);
    _TMP176 = _a0179.x && _a0179.y && _a0179.z;
    _a0183 = bvec3(_TMP4.x == _TMP12.x, _TMP4.y == _TMP12.y, _TMP4.z == _TMP12.z);
    _TMP180 = _a0183.x && _a0183.y && _a0183.z;
    _eqEG_BRT = _TMP172 && _TMP176 && _TMP180;
    _a0187 = bvec3(_TMP7.x == _TMP11.x, _TMP7.y == _TMP11.y, _TMP7.z == _TMP11.z);
    _TMP184 = _a0187.x && _a0187.y && _a0187.z;
    _a0191 = bvec3(_TMP4.x == _TMP20.x, _TMP4.y == _TMP20.y, _TMP4.z == _TMP20.z);
    _TMP188 = _a0191.x && _a0191.y && _a0191.z;
    _a0195 = bvec3(_TMP4.x == _TMP14.x, _TMP4.y == _TMP14.y, _TMP4.z == _TMP14.z);
    _TMP192 = _a0195.x && _a0195.y && _a0195.z;
    _eqEI_BSU = _TMP184 && _TMP188 && _TMP192;
    _a0199 = bvec3(_TMP4.x == _TMP3.x, _TMP4.y == _TMP3.y, _TMP4.z == _TMP3.z);
    _TMP196 = _a0199.x && _a0199.y && _a0199.z;
    _a0203 = bvec3(_TMP4.x == _TMP16.x, _TMP4.y == _TMP16.y, _TMP4.z == _TMP16.z);
    _TMP200 = _a0203.x && _a0203.y && _a0203.z;
    _a0207 = bvec3(_TMP4.x == _TMP5.x, _TMP4.y == _TMP5.y, _TMP4.z == _TMP5.z);
    _TMP204 = _a0207.x && _a0207.y && _a0207.z;
    _a0211 = bvec3(_TMP4.x == _TMP19.x, _TMP4.y == _TMP19.y, _TMP4.z == _TMP19.z);
    _TMP208 = _a0211.x && _a0211.y && _a0211.z;
    _outB = _TMP116 && _TMP196 && _TMP92 && _TMP200 && (_eqEH_BGIM || _eqEG_BRT && _TMP100) || _TMP120 && _TMP204 && _TMP88 && _TMP208 && (_eqEH_BGIM || _eqEI_BSU && _TMP100) || _TMP124 && _TMP88 && _TMP92 && _TMP108 && (_eqEG_BRT && _TMP104 || _eqEI_BSU && _TMP96);
    _a0215 = bvec3(_TMP10.x == _TMP9.x, _TMP10.y == _TMP9.y, _TMP10.z == _TMP9.z);
    _TMP212 = _a0215.x && _a0215.y && _a0215.z;
    _a0219 = bvec3(_TMP10.x == _TMP16.x, _TMP10.y == _TMP16.y, _TMP10.z == _TMP16.z);
    _TMP216 = _a0219.x && _a0219.y && _a0219.z;
    _a0223 = bvec3(_TMP10.x == _TMP11.x, _TMP10.y == _TMP11.y, _TMP10.z == _TMP11.z);
    _TMP220 = _a0223.x && _a0223.y && _a0223.z;
    _a0227 = bvec3(_TMP10.x == _TMP19.x, _TMP10.y == _TMP19.y, _TMP10.z == _TMP19.z);
    _TMP224 = _a0227.x && _a0227.y && _a0227.z;
    _outH = _TMP116 && _TMP140 && _TMP212 && _TMP216 && (_eqEB_HACJ || _eqEA_HNP && _TMP100) || _TMP120 && _TMP136 && _TMP220 && _TMP224 && (_eqEB_HACJ || _eqEC_HOQ && _TMP100) || _TMP112 && _TMP136 && _TMP140 && _TMP144 && (_eqEA_HNP && _TMP132 || _eqEC_HOQ && _TMP128);
    if (_outB) { 
        _TMP41 = _TMP4.xyz;
    } else {
        if (_outH) { 
            _TMP42 = _TMP10.xyz;
        } else {
            _TMP42 = _TMP7.xyz;
        } 
        _TMP41 = _TMP42;
    } 
    FragColor.xyz = _TMP41;
    return;
} 
#endif
